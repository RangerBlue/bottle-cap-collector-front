{"version":3,"sources":["components/cap.js","components/caps.js","App.js","serviceWorker.js","index.js","caplogo.png"],"names":["Cap","state","cap","fetch","this","props","id","then","res","json","data","setState","catch","console","log","class","src","fileLocation","height","width","React","Component","Caps","caps","map","url","App","ids","loaded","addNewId","newID","prevState","renderItems","list","forEach","push","renderLogo","logo","item","length","i","Math","floor","random","sort","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"0PAsBeA,E,4MAnBbC,MAAQ,CAAEC,IAAK,I,kEACM,IAAD,OAClBC,MAAM,iDAAmDC,KAAKC,MAAMC,IACjEC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACL,EAAKC,SAAS,CAAET,IAAKQ,OAEtBE,MAAMC,QAAQC,O,+BAIjB,OACE,yBAAKC,MAAM,8CACT,yBAAKC,IAAKZ,KAAKH,MAAMC,IAAIe,aAAe,QAASC,OAAQ,IAAKC,MAAO,IAAKJ,MAAM,gB,GAdtEK,IAAMC,WCcTC,EAdF,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACd,OACE,yBAAKR,MAAM,aACT,yBAAKA,MAAM,OACRQ,EAAKC,KAAI,SAACtB,GAAD,OACR,yBAAKa,MAAM,6CACT,yBAAKC,IAAKd,EAAIuB,IAAM,OAAQP,OAAQ,GAAIC,MAAO,Y,gBCqE5CO,E,4MAtEbzB,MAAQ,CACNC,IAAK,GACLyB,IAAK,GACLC,QAAQ,G,EAGVC,SAAW,SAACC,GACV,EAAKnB,UAAS,SAAAoB,GAAS,MAAK,CAC1BJ,IAAI,GAAD,mBAAMI,EAAUJ,KAAhB,CAAqBG,S,EAqB5BE,YAAc,WACZ,IAAIC,EAAO,GAIX,OAHA,EAAKhC,MAAM0B,IAAIO,SAAQ,SAAA5B,GAAE,OACvB2B,EAAKE,KAAK,kBAAC,EAAD,CAAK7B,GAAIA,QAEd2B,G,EAGTG,WAAa,WACX,OACE,yBAAKrB,MAAM,WACT,yBAAKC,IAAKqB,IAAMnB,OAAQ,IAAKC,MAAO,IAAKJ,MAAM,iB,kEA5BhC,IAAD,OAClBZ,MAAM,mDACHI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACL,IAEI4B,EAFAC,EAAS7B,EAAK6B,OAClB,EAAK5B,SAAS,CAAET,IAAKQ,IAErB,IAAK,IAAI8B,EAAI,EAAGA,EAAI,EAAGA,IACrBF,EAAO5B,EAAK+B,KAAKC,MAAMD,KAAKE,SAAWJ,IACvC,EAAKV,SAASS,EAAKhC,IAGrB,EAAKK,SAAS,CAAEiB,QAAQ,OAEzBhB,MAAMC,QAAQC,O,+BAsBjB,OAAIV,KAAKH,MAAM2B,OACN,CACL,gCAAQ,qDACR,yBAAKb,MAAM,aACT,yBAAKA,MAAM,OACRX,KAAK4B,gBAGV,gCAAQ,0CACR,6BACE,kBAAC,EAAD,CAAMT,KAAMnB,KAAKH,MAAMC,IAAI0C,MAAK,uBAAGtC,GAAH,EAAuBA,UAKzDF,KAAKgC,iB,GAhEKf,aCMEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlD,MAAK,SAAAmD,GACJA,EAAaC,gBAEd/C,OAAM,SAAAgD,GACL/C,QAAQ+C,MAAMA,EAAMC,a,kBEzI5BC,EAAOC,QAAU,IAA0B,qC","file":"static/js/main.38d30d8d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass Cap extends React.Component {\r\n  state = { cap: [] }\r\n  componentDidMount() {\r\n    fetch('https://bottlecapcollector.herokuapp.com/caps/' + this.props.id)\r\n      .then(res => res.json())\r\n      .then((data) => {\r\n        this.setState({ cap: data })\r\n      })\r\n      .catch(console.log)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div class=\"col-12 col-sm-6 col-md-4 col-lg-3 col-xl-2\">\r\n        <img src={this.state.cap.fileLocation + \"=w190\"} height={190} width={190} class=\"rotate\"></img>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default Cap","import React from 'react'\r\n\r\nconst Caps = ({ caps }) => {\r\n  return (\r\n    <div class=\"container\">\r\n      <div class=\"row\">\r\n        {caps.map((cap) => (\r\n          <div class=\"col-6 col-sm-4 col-md-3 col-lg-2 col-xl-1\">\r\n            <img src={cap.url + \"=w95\"} height={95} width={95}></img>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Caps","\r\nimport React, { Component } from 'react';\r\nimport Cap from './components/cap';\r\nimport Caps from './components/caps';\r\nimport logo from './caplogo.png';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    cap: [],\r\n    ids: [],\r\n    loaded: false\r\n  }\r\n\r\n  addNewId = (newID) => {\r\n    this.setState(prevState => ({\r\n      ids: [...prevState.ids, newID]\r\n    }));\r\n  };\r\n\r\n  componentDidMount() {\r\n    fetch('https://bottlecapcollector.herokuapp.com/links/')\r\n      .then(res => res.json())\r\n      .then((data) => {\r\n        let length = data.length;\r\n        this.setState({ cap: data });\r\n        let item;\r\n        for (let i = 0; i < 6; i++) {\r\n          item = data[Math.floor(Math.random() * length)];\r\n          this.addNewId(item.id);\r\n        }\r\n\r\n        this.setState({ loaded: true })\r\n      })\r\n      .catch(console.log)\r\n  }\r\n\r\n  renderItems = () => {\r\n    let list = [];\r\n    this.state.ids.forEach(id =>\r\n      list.push(<Cap id={id} />)\r\n    );\r\n    return list;\r\n  }\r\n\r\n  renderLogo = () => {\r\n    return (\r\n      <div class=\"loading\">\r\n        <img src={logo} height={200} width={200} class=\"rotateLogo\"></img>\r\n      </div>\r\n    );\r\n\r\n  }\r\n\r\n\r\n  render() {\r\n    if (this.state.loaded) {\r\n      return [\r\n        <center><h1>Bottle Cap Collector</h1></center>,\r\n        <div class=\"container\">\r\n          <div class=\"row\">\r\n            {this.renderItems()}\r\n          </div>\r\n        </div>,\r\n        <center><h2>All caps:</h2></center>,\r\n        <div>\r\n          <Caps caps={this.state.cap.sort(({ id: previousID }, { id: currentID }) => previousID - currentID)} />\r\n        </div>\r\n      ];\r\n    } else {\r\n      return (\r\n        this.renderLogo()\r\n      )\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/caplogo.ce7306a3.png\";"],"sourceRoot":""}